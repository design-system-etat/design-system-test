{"version":3,"sources":["<no source>","../../../breadcrumb.css","../../../../../packages/breadcrumb/main.scss","../../../../../packages/breadcrumb/src/styles/_module.scss","../../../../../packages/core/src/styles/spacing/tools/_space.scss","../../../../../packages/core/src/styles/typography/tools/_styles.scss","../../../../../packages/core/src/styles/reset/tools/_link.scss","../../../../../packages/core/src/styles/global/tools/_blocks.scss","../../../../../packages/core/src/styles/reset/tools/_lists.scss","../../../../../packages/core/src/styles/global/tools/_group.scss","../../../../../packages/core/src/styles/global/tools/_pseudo.scss","../../../../../packages/core/src/styles/icons/_tools.scss","../../../../../packages/core/src/styles/global/functions/_units.scss","../../../../../packages/breadcrumb/src/styles/_schemes.scss","../../../../../packages/schemes/src/styles/tools/_element.scss","../../../../../packages/core/src/styles/global/functions/_strings.scss","../../../../../packages/core/src/styles/global/misc/breakpoints/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACAhB;;yCDGyC;;AEEzC;;EFCE;;AEEF;ECsEI,6BA1CoB;EA0CpB,eA1CoB;EDxBtB,gBAAgB;EEQhB,kBAA4C;EAG1C,oBDaoB;EDtBtB,kBAAkB;EAiClB;;IF/BE;AACJ;;AEDE;EGLA,kCAA8C;EDS9C,kBAA4C;EAG1C,oBDaoB;EA0CpB,SD3DiB;EC2DjB,UD1DkB;AFWtB;;AEfG;EAOG,aAAa;AFYnB;;AMjBE;ECAA,gBAAU;EHEV,kBAA4C;EAG1C,oBDaoB;EDFpB,cAAc;AFclB;;AQpCE;ENuCE,eAAe;EAMf;;MFSE;EGEA,qBAhCkB;EDyBpB,sBAAsB;EAgBtB;;KFNC;AACL;;AS9DU;EAOJ,aPqC0B;AFsBhC;;ASlEU;ECyDF,6BAA6B;EAC7B,kBAAkB;EAClB,8BAA8B;EAC9B,oBAAoB;EACpB,oBAAoB;EACpB,cAAc;AVatB;;AS3EU;EC0EN,eCzD8C;ED4B9C,YAAqB;AVmCzB;;AShFU;EN0DJ,eDDyB;EACvB,sBAAsB;AF2B9B;;AQnFG;EN6DG,eAAe;EACf,sBAAsB;AF0B5B;;AS1FU;EAOJ,WPgEuB;ECbvB,eDcyB;AFuB/B;;AQ7FG;EN2EG,eAAe;AFsBrB;;AErGA;EUGE;;IZuGE;AACJ;;AEnGE;EWyCA,kBCtBsG;EDsBtG,gCCtBsG;AdqFxG;;AS9GU;EI+CR,kBCtBsG;AdyFxG;;AQhHG;EK6CD,kBCtBsG;Ad6FxG;;AYrGK;EC8BH,kBCtBsG;AdiGxG;;AelHI;EbVJ;IC4DM,mBAhCkB;EHdtB;;EENA;IAWI,aAAa;EFajB;;EMtBC;IJoBK,mBAAmB;IACnB,iBAAiB;IACjB,mBAAmB;IACnB,qBAAqB;EFe3B;;ES9CQ;IAGJ,aAAS;ET8Cb;AApCF","file":"breadcrumb.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  BREADCRUMB\n\\* ------------------------------------ */\n/**\nun padding de 4px et une marge négative en compensation sont mis en place afin d'éviter de couper le focus.\n */\n.rf-breadcrumb {\n  margin: 0.5rem -0.5rem 1.5rem;\n  padding: 0.5rem;\n  overflow: hidden;\n  font-size:  0.75rem;\n  line-height:  1.25rem;\n  position: relative;\n  /**\n  margin-bottom de 1N pour créer cet espace entre chaque ligne\n   */\n}\n\n@media (min-width: 48em) {\n  .rf-breadcrumb {\n    margin-bottom: 2rem;\n  }\n}\n\n.rf-breadcrumb__button {\n  box-shadow:  0 1px 0 0 currentColor;\n  font-size:  0.75rem;\n  line-height:  1.25rem;\n  margin: 0;\n  padding: 0;\n}\n\n.rf-breadcrumb__button[aria-expanded=\"true\" i] {\n  display: none;\n}\n\n@media (min-width: 48em) {\n  .rf-breadcrumb__button {\n    display: none;\n  }\n}\n\n.rf-breadcrumb__list {\n  --is-list: false;\n  font-size:  0.75rem;\n  line-height:  1.25rem;\n  display: block;\n}\n\n@media (min-width: 48em) {\n  .rf-breadcrumb__list:not(.rf-collapse--expanded) {\n    visibility: visible;\n    overflow: visible;\n    max-height: initial;\n    display: inline-block;\n  }\n  .rf-breadcrumb__list:not(.rf-collapse--expanded)::before {\n    display: none;\n  }\n}\n\n.rf-breadcrumb__item {\n  display: inline;\n  /**\n    flèche séparatrice en svg avec un espace à la suite\n     */\n  margin-bottom: 0.5rem;\n  vertical-align: middle;\n  /**\n      on place un espace après l'élément de manière à ce qu'il ne soit pas présent devant la flèche au retour à la ligne\n    */\n}\n\n.rf-breadcrumb__item:first-child::before {\n  content: none;\n}\n\n.rf-breadcrumb__item:not(:first-child)::before {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.rf-breadcrumb__item:not(:first-child)::before {\n  font-size:  1rem;\n  content:  \"\";\n}\n\n.rf-breadcrumb__item:not(:first-child)::before {\n  margin-right: 0;\n  vertical-align: middle;\n}\n\n.rf-breadcrumb__item a {\n  display: inline;\n  vertical-align: middle;\n}\n\n.rf-breadcrumb__item:not(:last-child)::after {\n  content: \"\";\n  margin-right: 0;\n}\n\n.rf-breadcrumb__item:last-child a {\n  cursor: default;\n}\n\n.rf-breadcrumb {\n  /**\n  margin-bottom de 1N pour créer cet espace entre chaque ligne\n   */\n}\n\n.rf-breadcrumb__button {\n  color: var(--g600);\n  background-color: var(--t-plain);\n}\n\n.rf-breadcrumb__item:not(:first-child)::before {\n  color: var(--g600);\n}\n\n.rf-breadcrumb__item:not(:last-child) a {\n  color: var(--g600);\n}\n\n.rf-breadcrumb__item--curent a {\n  color: var(--g800);\n}\n","/* ------------------------------------ *\\\n  BREADCRUMB\n\\* ------------------------------------ */\n\n@import './index';\n@import './src/styles/module';\n@import './src/styles/schemes';\n","////\n/// Breadcrumb Module\n/// @group breadcrumb\n////\n\n/**\nun padding de 4px et une marge négative en compensation sont mis en place afin d'éviter de couper le focus.\n */\n#{ns(breadcrumb)} {\n  @include margin(2v -2v 6v);\n  @include padding(2v);\n  @include margin-bottom(8v, md);\n  overflow: hidden;\n  @include text-style(xs);\n  position: relative;\n\n  &__button {\n    @include link-underline;\n    @include text-style(xs);\n    @include margin(0);\n    @include padding(0);\n\n    &[aria-expanded=\"true\" i] {\n      display: none;\n    }\n\n    @include respond-from(md) {\n      display: none;\n    }\n  }\n\n  @include list() {\n    @include disable-list-style;\n    @include text-style(xs);\n    display: block;\n\n    @include respond-from(md) {\n      &:not(#{ns(collapse--expanded)}) {\n        visibility: visible;\n        overflow: visible;\n        max-height: initial;\n        display: inline-block;\n        @include before(none);\n      }\n    }\n  }\n\n  /**\n  margin-bottom de 1N pour créer cet espace entre chaque ligne\n   */\n  @include group-item() {\n    display: inline;\n\n    &:first-child {\n      @include before(null, none);\n    }\n\n    /**\n    flèche séparatrice en svg avec un espace à la suite\n     */\n    @include margin-bottom(2v);\n    vertical-align: middle;\n\n    &:not(:first-child) {\n      @include font-icon(arrow-right-s-line, sm);\n\n      @include before {\n        @include margin-right(0);\n        vertical-align: middle;\n      }\n    }\n\n    a {\n      display: inline;\n      vertical-align: middle;\n    }\n\n    /**\n      on place un espace après l'élément de manière à ce qu'il ne soit pas présent devant la flèche au retour à la ligne\n    */\n    &:not(:last-child) {\n      @include after(null, '') {\n        @include margin-right(0);\n      }\n    }\n\n    &:last-child a {\n      cursor: default;\n    }\n  }\n}\n\n@import 'schemes';\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height));\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null) {\n  $settings: map-get($text-settings, $name);\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null) {\n  $settings: map-get($title-settings, $name);\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Core Tools : Reset\n/// @group core\n////\n\n%a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin link-underline($prepend: '') {\n  box-shadow: #{$prepend} 0 1px 0 0 currentColor;\n}\n\n@mixin enable-link-style() {\n  --is-link: ;\n}\n\n@mixin disable-link-style() {\n  --is-link: false;\n}\n\n@mixin enlarge-link {\n  outline-width: 0 !important;\n  @include before(block, '') {\n    @include absolute(0, 0, 0, 0, 100%, 100%);\n    outline-offset: 2px;\n    outline-style: inherit;\n    outline-color: inherit;\n    outline-width: 2px;\n  }\n}\n","////\n/// Core Tools : Global list\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Reset list\n/// @group core\n////\n\n%list-reset {\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n@mixin enable-list-style() {\n  --is-list: ;\n}\n\n@mixin disable-list-style() {\n  --is-list: false;\n}\n\n@mixin remove-list-style($nested: false) {\n  @include padding-bottom(0);\n\n  & > li {\n    @include padding-bottom(0);\n    @include before(none, none) {\n      font-size: inherit;\n      font-weight: inherit;\n    }\n\n    @if $nested {\n      & > ol,\n      & > ul {\n        @include padding-top(0);\n        @include padding-left(0);\n\n        & > li {\n          @include text-style(md);\n          @include before {\n            @include padding-right(0);\n            font-size: inherit;\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global group\n/// @group core\n////\n\n@mixin group() {\n  &-group {\n    @content;\n  }\n}\n\n@mixin group-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    font-size: #{$prepend} icon-size($icon-size);\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Breadcrumb Schemes\n/// @group breadcrumb\n////\n\n#{ns(breadcrumb)} {\n  &__button {\n    @include scheme-element-text-color(g600, true);\n    @include scheme-element-bg-color(t-plain);\n  }\n\n  /**\n  margin-bottom de 1N pour créer cet espace entre chaque ligne\n   */\n  @include group-item() {\n    &:not(:first-child) {\n      @include before {\n        @include scheme-element-text-color(g600, true);\n      }\n    }\n\n    &:not(:last-child) {\n      a {\n        @include scheme-element-text-color(g600, true);\n      }\n    }\n\n    &--curent {\n      a {\n        @include scheme-element-text-color(g800, true);\n      }\n    }\n  }\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n/// @param {Number} $max - maximum d'itération de la boucle à partir de laquelle l'action est abandandonnée\n@function str-to-num($value, $max:1000) {\n  @for $i from 0 to $max {\n    @if $value == quote($i) {\n      @return $i;\n    }\n    @else if $value == quote(-$i) {\n      @return -$i;\n    }\n  }\n  @return null;\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1)));\n  }\n  @return $list;\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}