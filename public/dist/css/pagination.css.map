{"version":3,"sources":["<no source>","../../../pagination.css","../../../../../packages/pagination/main.scss","../../../../../packages/pagination/src/styles/_module.scss","../../../../../packages/core/src/styles/reset/tools/_lists.scss","../../../../../packages/core/src/styles/reset/tools/_link.scss","../../../../../packages/core/src/styles/global/tools/_blocks.scss","../../../../../packages/core/src/styles/global/tools/_display.scss","../../../../../packages/core/src/styles/spacing/tools/_space.scss","../../../../../packages/core/src/styles/global/tools/_pseudo.scss","../../../../../packages/core/src/styles/icons/_tools.scss","../../../../../packages/core/src/styles/global/functions/_units.scss","../../../../../packages/core/src/styles/spacing/tools/_size.scss","../../../../../packages/core/src/styles/global/misc/z-index/_tools.scss","../../../../../packages/core/src/styles/global/misc/z-index/_settings.scss","../../../../../packages/schemes/src/styles/tools/_element.scss","../../../../../packages/core/src/styles/global/functions/_strings.scss","../../../../../packages/schemes/src/styles/tools/_hover.scss","../../../../../packages/pagination/src/styles/_schemes.scss","../../../../../packages/core/src/styles/global/misc/breakpoints/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACAhB;;yCDGyC;;AEEzC;ECaE,gBAAU;ECCV,gBAAU;AJZZ;;AKWE;ECPE,aAAa;EAIb,mBAAgB;EAYhB,eAAW;ECmDX,ULpEkB;EKoElB,cLnEsB;AFI1B;;AKSE;ECbE,aAAa;EAIb,mBAAgB;EAIhB,mBAAa;EAIb,uBAAiB;ECuDjB,kBA1CoB;EA0CpB,sBA1CoB;ELlBpB,eKkBoB;ELjBpB,YKiBoB;APVxB;;AKFG;;EHDG,aAAa;EACb,aAAa;EKsDf,SLrDmB;AFOvB;;AEJI;EACE,aAAa;AFOnB;;AEAI;EACE,mBKDkB;ELElB,oBAAoB;AFS1B;;AENI;;;EK2BE,oBAhCkB;APiBxB;;AELI;;EKoBE,qBAhCkB;EAgClB,sBAhCkB;APsBxB;;AQhDU;;ECyDF,6BAA6B;EAC7B,kBAAkB;EAClB,8BAA8B;EAC9B,oBAAoB;EACpB,oBAAoB;EACpB,cAAc;ATLtB;;AQzDU;EC0EN,iBCzD8C;ED4B9C,YAAqB;EPGjB,cAAc;ESlDhB,aAAO;EAGP,cAAQ;EJmEV,SLlBqB;EU5CvB,UCLO;EXmDD,oBAAoB;AFgB5B;;AQpEU;EC0EN,iBCzD8C;ED4B9C,YAAqB;EPajB,cAAc;ES5DhB,aAAO;EAGP,cAAQ;EJmEV,SLRqB;EUtDvB,UCLO;EX6DD,oBAAoB;AFiB5B;;AQ/EU;EC0EN,iBCzD8C;ED4B9C,YAAqB;EPuBjB,cAAc;EStEhB,aAAO;EAGP,cAAQ;EJmEV,SLEqB;EACjB,oBAAoB;AFkB5B;;AQzFU;EC0EN,iBCzD8C;ED4B9C,YAAqB;EPgCjB,cAAc;ES/EhB,aAAO;EAGP,cAAQ;EJmEV,SLWqB;EACjB,oBAAoB;AFmB5B;;AEdE;;;;EAIE,aAAa;AFiBjB;;AEXE;;EK3BE,2BA1CoB;AP8FxB;;AEpBE;;EKhCE,2BA1CoB;EL6EpB,aAAa;AFuBjB;;AEhBE;;EKpDI,qBAhCkB;EAgClB,qBAhCkB;EAgClB,sBAhCkB;EAgClB,sBAhCkB;APmHxB;;AEvBE;;EK5DI,sBAhCkB;EAgClB,sBAhCkB;EAgClB,qBAhCkB;EAgClB,qBAhCkB;AP2HxB;;AEvBE;EACE,oBAAoB;AF0BxB;;AEvBE;EIjIE,aAAa;EAIb,mBAAgB;EAIhB,mBAAa;EAIb,uBAAiB;ECuDjB,kBA1CoB;EA0CpB,kBA1CoB;EL4GpB,eK5GoB;EL6GpB,YK7GoB;EL8GpB,gBAAgB;EAChB,mBK/GoB;ELiHpB;;;;;;;;;;;;;;MFyCE;AACN;;AKvKE;ESiCA,kBCtBsG;AfgKxG;;AE/JI;EYqBF,8BCtBsG;EDsBtG,qBCtBsG;AfqKxG;;AcxKM;EEbF,mCAAyB;EACzB,sCAA2B;AhBkM/B;;ActLM;;EEbF,mCAAyB;EACzB,sCAA2B;AhBwM/B;;Ac5LM;;EEbF,uCAAyB;EACzB,sCAA2B;AhB8M/B;;AclMM;;EEbF,uCAAyB;EACzB,wCAA2B;AhBoN/B;;ActLM;EE/BF,uCAAyB;EACzB,sCAA2B;AhByN/B;;AiB/NI;EH2CF,uBCtBsG;Af8MxG;;AErGE;EYnFA,gCCtBsG;AfkNxG;;AcrNM;EETF,uCAAc;EACd,yCAAe;AhB2OnB;;AcnOM;;EETF,uCAAc;EACd,yCAAe;AhBiPnB;;AczOM;;EETF,uCAAc;EACd,yCAAe;AhBuPnB;;Ac/OM;;EETF,uCAAc;EACd,yCAAe;AhB6PnB;;AcnOM;EE3BF,uCAAc;EACd,yCAAe;AhBkQnB;;AkBxQI;EhBUA;IAII,aAAa;EFSnB;;EEsDA;;;;IAMI,eAAe;EFuBnB;;EEdA;;IAMI,eAAe;EF0BnB;AApGF;;AgBXE;EACU;;;IAIJ,+EAA+E;EhByKrF;;EgB7KU;;;IAQJ,iFAAiF;EhBwKvF;;EgBhLU;;;IAIJ,+EAA+E;EhBsNrF;;EgB1NU;;;IAQJ,iFAAiF;EhBqNvF;AA5CF","file":"pagination.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  PAGINATION\n\\* ------------------------------------ */\n.rf-pagination {\n  --is-list: false;\n  --is-link: false;\n}\n\n.rf-pagination__list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0 -2px;\n}\n\n.rf-pagination__item {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  padding: 0 0.75rem;\n  margin: 2px 2px 0.5rem;\n  min-width: 2rem;\n  height: 2rem;\n}\n\n.rf-pagination__item:not(.rf-pagination__item--first):not(.rf-pagination__item--prev)::before, .rf-pagination__item:not(.rf-pagination__item--next):not(.rf-pagination__item--last)::after {\n  content: none;\n  display: none;\n  margin: 0;\n}\n\n.rf-pagination__item--from-md {\n  display: none;\n}\n\n@media (min-width: 48em) {\n  .rf-pagination__item--from-md {\n    display: flex;\n  }\n}\n\n.rf-pagination__item--active {\n  border-radius: 1rem;\n  pointer-events: none;\n}\n\n.rf-pagination__item--first + .rf-pagination__item:not(.rf-pagination__item--prev),\n.rf-pagination__item--prev + .rf-pagination__item, .rf-pagination__item--next,\n.rf-pagination__item:not(.rf-pagination__item--next) + .rf-pagination__item--last {\n  margin-left: 0.75rem;\n}\n\n.rf-pagination__item--first, .rf-pagination__item--prev, .rf-pagination__item--next, .rf-pagination__item--last {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.rf-pagination__item--first::before, .rf-pagination__item--prev::before, .rf-pagination__item--next::after, .rf-pagination__item--last::after {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.rf-pagination__item--first::before {\n  font-size:  1.5rem;\n  content:  \"\";\n  display: block;\n  width: 1.5rem;\n  height: 1.5rem;\n  margin: 0;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.rf-pagination__item--prev::before {\n  font-size:  1.5rem;\n  content:  \"\";\n  display: block;\n  width: 1.5rem;\n  height: 1.5rem;\n  margin: 0;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.rf-pagination__item--next::after {\n  font-size:  1.5rem;\n  content:  \"\";\n  display: block;\n  width: 1.5rem;\n  height: 1.5rem;\n  margin: 0;\n  pointer-events: none;\n}\n\n.rf-pagination__item--last::after {\n  font-size:  1.5rem;\n  content:  \"\";\n  display: block;\n  width: 1.5rem;\n  height: 1.5rem;\n  margin: 0;\n  pointer-events: none;\n}\n\n.rf-pagination__item--first .rf-pagination__label,\n.rf-pagination__item--prev .rf-pagination__label,\n.rf-pagination__item--next .rf-pagination__label,\n.rf-pagination__item--last .rf-pagination__label {\n  display: none;\n}\n\n@media (min-width: 48em) {\n  .rf-pagination__item--first .rf-pagination__label,\n  .rf-pagination__item--prev .rf-pagination__label,\n  .rf-pagination__item--next .rf-pagination__label,\n  .rf-pagination__item--last .rf-pagination__label {\n    display: inline;\n  }\n}\n\n.rf-pagination__item--first .rf-pagination__label,\n.rf-pagination__item--prev .rf-pagination__label {\n  padding: 0 0.5rem 0 0.25rem;\n}\n\n.rf-pagination__item--next .rf-pagination__label,\n.rf-pagination__item--last .rf-pagination__label {\n  padding: 0 0.25rem 0 0.5rem;\n  display: none;\n}\n\n@media (min-width: 48em) {\n  .rf-pagination__item--next .rf-pagination__label,\n  .rf-pagination__item--last .rf-pagination__label {\n    display: inline;\n  }\n}\n\n.rf-pagination__item--first .rf-pagination__link,\n.rf-pagination__item--prev .rf-pagination__link {\n  margin-left: -1.75rem;\n  padding-left: 1.75rem;\n  margin-right: -0.25rem;\n  padding-right: 0.25rem;\n}\n\n.rf-pagination__item--next .rf-pagination__link,\n.rf-pagination__item--last .rf-pagination__link {\n  margin-right: -1.75rem;\n  padding-right: 1.75rem;\n  margin-left: -0.25rem;\n  padding-left: 0.25rem;\n}\n\n.rf-pagination__item--disabled .rf-pagination__link {\n  pointer-events: none;\n}\n\n.rf-pagination__link {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  padding: 0 0.75rem;\n  margin: 0 -0.75rem;\n  min-width: 2rem;\n  height: 2rem;\n  box-shadow: none;\n  border-radius: 1rem;\n  /**\n    &:focus {\n      outline: none !important;\n      &::after {\n        content:'';\n        position: absolute;\n        top: -4px;\n        right: -4px;\n        bottom: -4px;\n        left: -4px;\n        border-radius: calc(2rem + 8px);\n        @include scheme-element-border-color(focus, true, null, $COLOR solid 2px);\n      }\n    }\n     */\n}\n\n.rf-pagination__item {\n  color: var(--g800);\n}\n\n.rf-pagination__item--active {\n  background-color: var(--bf500);\n  color: var(--w-bf500);\n}\n\n@media (hover: hover) and (pointer: fine) {\n  a.rf-pagination__item--active[href]:hover, .rf-pagination__item--active:not(a):not([disabled]):hover, .rf-pagination__item--active:not(a):not(:disabled):hover {\n    background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n  }\n  a.rf-pagination__item--active[href]:active, .rf-pagination__item--active:not(a):not([disabled]):active, .rf-pagination__item--active:not(a):not(:disabled):active {\n    background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n  }\n}\n\n:root:not([data-rf-theme=\"dark\" i]) .rf-pagination__item--active {\n  --color-hover: rgba(0, 0, 246, 0.5);\n  --color-active: rgba(91, 91, 255, 0.5);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-light\"] .rf-pagination__item--active,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .rf-pagination__item--active {\n  --color-hover: rgba(0, 0, 246, 0.5);\n  --color-active: rgba(91, 91, 255, 0.5);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-dark\"] .rf-pagination__item--active,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .rf-pagination__item--active {\n  --color-hover: rgba(138, 138, 204, 0.5);\n  --color-active: rgba(84, 84, 180, 0.5);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-soft\"] .rf-pagination__item--active,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-soft-\"] .rf-pagination__item--active {\n  --color-hover: rgba(108, 108, 108, 0.5);\n  --color-active: rgba(161, 161, 161, 0.5);\n}\n\n:root[data-rf-theme=\"dark\" i] .rf-pagination__item--active {\n  --color-hover: rgba(138, 138, 204, 0.5);\n  --color-active: rgba(84, 84, 180, 0.5);\n}\n\n.rf-pagination__item--disabled {\n  color: var(--g600-g500);\n}\n\n.rf-pagination__link {\n  background-color: var(--t-plain);\n}\n\n@media (hover: hover) and (pointer: fine) {\n  a.rf-pagination__link[href]:hover, .rf-pagination__link:not(a):not([disabled]):hover, .rf-pagination__link:not(a):not(:disabled):hover {\n    background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n  }\n  a.rf-pagination__link[href]:active, .rf-pagination__link:not(a):not([disabled]):active, .rf-pagination__link:not(a):not(:disabled):active {\n    background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n  }\n}\n\n:root:not([data-rf-theme=\"dark\" i]) .rf-pagination__link {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-light\"] .rf-pagination__link,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .rf-pagination__link {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-dark\"] .rf-pagination__link,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .rf-pagination__link {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-soft\"] .rf-pagination__link,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-soft-\"] .rf-pagination__link {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root[data-rf-theme=\"dark\" i] .rf-pagination__link {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n","/* ------------------------------------ *\\\n  PAGINATION\n\\* ------------------------------------ */\n\n@import './index';\n@import './src/styles/module';\n@import './src/styles/schemes';\n","////\n/// Pagination Module\n/// @group pagination\n////\n\n#{ns(pagination)} {\n  @include disable-list-style;\n  @include disable-link-style;\n  @include list {\n    @include display-flex(row, null, null, wrap);\n    @include padding(0);\n    @include margin(0 -2px);\n  }\n\n  @include list-item {\n    @include display-flex(row, center, center);\n    @include padding(0 3v);\n    @include margin(2px 2px 2v);\n    min-width: space(8v);\n    height: space(8v);\n\n    &:not(&--first):not(&--prev)::before,\n    &:not(&--next):not(&--last)::after {\n      content: none;\n      display: none;\n      @include margin(0);\n    }\n\n    &--from-md {\n      display: none;\n\n      @include respond-from(md) {\n        display: flex;\n      }\n    }\n\n    &--active {\n      border-radius: space(4v);\n      pointer-events: none;\n    }\n\n    &--first + &:not(&--prev),\n    &--prev + &,\n    &--next,\n    &:not(&--next) + &--last {\n      @include margin-left(3v);\n    }\n\n    &--first,\n    &--prev,\n    &--next,\n    &--last {\n      @include padding-left(1v);\n      @include padding-right(1v);\n    }\n\n    &--first {\n      @include font-icon(arrow-left-s-first-line, md) {\n        display: block;\n        @include size(6v,6v);\n        @include margin(0);\n        @include z-index(over);\n        pointer-events: none;\n      }\n    }\n\n    &--prev {\n      @include font-icon(arrow-left-s-line, md) {\n        display: block;\n        @include size(6v,6v);\n        @include margin(0);\n        @include z-index(over);\n        pointer-events: none;\n      }\n    }\n\n    &--next {\n      @include font-icon(arrow-right-s-line, md, after) {\n        display: block;\n        @include size(6v,6v);\n        @include margin(0);\n        pointer-events: none;\n      }\n    }\n\n    &--last {\n      @include font-icon(arrow-right-s-last-line, md, after) {\n        display: block;\n        @include size(6v,6v);\n        @include margin(0);\n        pointer-events: none;\n      }\n    }\n  }\n\n  &__item--first &__label,\n  &__item--prev &__label,\n  &__item--next &__label,\n  &__item--last &__label {\n    display: none;\n    @include respond-from(md) {\n      display: inline;\n    }\n  }\n\n  &__item--first &__label,\n  &__item--prev &__label {\n    @include padding(0 2v 0 1v);\n  }\n\n  &__item--next &__label,\n  &__item--last &__label {\n    @include padding(0 1v 0 2v);\n    display: none;\n\n    @include respond-from(md) {\n      display: inline;\n    }\n  }\n\n  &__item--first &__link,\n  &__item--prev &__link {\n    @include margin-left(-7v);\n    @include padding-left(7v);\n    @include margin-right(-1v);\n    @include padding-right(1v);\n  }\n\n  &__item--next &__link,\n  &__item--last &__link {\n    @include margin-right(-7v);\n    @include padding-right(7v);\n    @include margin-left(-1v);\n    @include padding-left(1v);\n  }\n\n  &__item--disabled &__link {\n    pointer-events: none;\n  }\n\n  &__link {\n    @include display-flex(row, center, center);\n    @include padding(0 3v);\n    @include margin(0 -3v);\n    min-width: space(8v);\n    height: space(8v);\n    box-shadow: none;\n    border-radius: space(4v);\n\n    /**\n    &:focus {\n      outline: none !important;\n      &::after {\n        content:'';\n        position: absolute;\n        top: -4px;\n        right: -4px;\n        bottom: -4px;\n        left: -4px;\n        border-radius: calc(2rem + 8px);\n        @include scheme-element-border-color(focus, true, null, $COLOR solid 2px);\n      }\n    }\n     */\n  }\n}\n","////\n/// Core Tools : Reset list\n/// @group core\n////\n\n%list-reset {\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n@mixin enable-list-style() {\n  --is-list: ;\n}\n\n@mixin disable-list-style() {\n  --is-list: false;\n}\n\n@mixin remove-list-style($nested: false) {\n  @include padding-bottom(0);\n\n  & > li {\n    @include padding-bottom(0);\n    @include before(none, none) {\n      font-size: inherit;\n      font-weight: inherit;\n    }\n\n    @if $nested {\n      & > ol,\n      & > ul {\n        @include padding-top(0);\n        @include padding-left(0);\n\n        & > li {\n          @include text-style(md);\n          @include before {\n            @include padding-right(0);\n            font-size: inherit;\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Reset\n/// @group core\n////\n\n%a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin link-underline($prepend: '') {\n  box-shadow: #{$prepend} 0 1px 0 0 currentColor;\n}\n\n@mixin enable-link-style() {\n  --is-link: ;\n}\n\n@mixin disable-link-style() {\n  --is-link: false;\n}\n\n@mixin enlarge-link {\n  outline-width: 0 !important;\n  @include before(block, '') {\n    @include absolute(0, 0, 0, 0, 100%, 100%);\n    outline-offset: 2px;\n    outline-style: inherit;\n    outline-color: inherit;\n    outline-width: 2px;\n  }\n}\n","////\n/// Core Tools : Global list\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n\n%inline-flex-center {\n  @include display-flex(row, center, null, null, true);\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    font-size: #{$prepend} icon-size($icon-size);\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tools : Global z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Settings : z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  modal: 4500,\n  modal-focus: 5000,\n  modal-footer: 5500,\n  modal-footer-focus: 6000,\n);\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n/// @param {Number} $max - maximum d'itération de la boucle à partir de laquelle l'action est abandandonnée\n@function str-to-num($value, $max:1000) {\n  @for $i from 0 to $max {\n    @if $value == quote($i) {\n      @return $i;\n    }\n    @else if $value == quote(-$i) {\n      @return -$i;\n    }\n  }\n  @return null;\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1)));\n  }\n  @return $list;\n}\n","////\n/// Schemes Module : Hover\n/// @group schemes\n////\n\n/// Définit les couleurs d'hover\n/// @access private\n/// @param {Color} $color - couleur de l'élément\n/// @param {Bool} $is-block - est-ce que cette définition se fait au niveau d'un block de combinaison ?\n@mixin _get-hover-vars($color, $is-block: false) {\n\n  @if opacity($color) != 0 {\n\n    $prop: color;\n\n    @if $is-block {\n      $prop: block-color;\n    }\n\n    --#{$prop}-hover: #{ _overlay-color($color, 1) };\n    --#{$prop}-active: #{ _overlay-color($color, 2) };\n  }\n  @else {\n    --color-hover: var(--block-color-hover);\n    --color-active: var(--block-color-active);\n  }\n}\n\n/// Applique le hover sur un élément\n/// @access private\n@mixin _scheme-element-hover() {\n  @media (hover: hover) and (pointer: fine) {\n    @at-root #{selector-unify(&, a)}[href],\n    &:not(a):not([disabled]),\n    &:not(a):not(:disabled) {\n      &:hover {\n        background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n      }\n\n      &:active {\n        background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n      }\n    }\n  }\n}\n\n@mixin remove-hover() {\n  &:hover,\n  &:active {\n    &:not([disabled]),\n    &:not(:disabled) {\n      background-image: none;\n    }\n  }\n}\n","////\n/// Pagination Schemes\n/// @group pagination\n////\n\n#{ns(pagination)} {\n  @include list-item {\n    @include scheme-element-text-color(g800);\n\n    &--active {\n      @include scheme-element-bg-color(bf500, true, true);\n      @include scheme-element-text-color(w-bf500);\n    }\n\n    &--disabled {\n      @include scheme-element-text-color(g600-g500);\n    }\n  }\n\n  &__link {\n    @include scheme-element-bg-color(t-plain, true, true);\n  }\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}