////
/// Core Tools : Typography build
/// @group core
////

@mixin _text($font-size, $line-height: null, $color-set: null, $font-weight: null) {
  font-size: font-size($font-size);

  @if $line-height != null {
    line-height: line-height($line-height);
  }

  @if $color-set != null {
    @include scheme-element-text-color($color-set, true);
  }

  @if $font-weight != null {
    font-weight: $font-weight;
  }
}

@mixin text-variation($variation, $color-set: null, $font-weight: null) {
  $font-size: map_get($variation, font-size);
  $line-height: map_get($variation, line-height);
  @if $color-set == null {
    $color-set: map_get($variation, color-set);
  }
  @if $font-weight == null {
    $font-weight: map_get($variation, font-weight);
  }
  @include _text($font-size, $line-height, $color-set, $font-weight);
}

@mixin _iterate-variations($settings, $color-set: null, $font-weight: null) {
  $default: map_get($settings, default);
  @include text-variation($default, $color-set, $font-weight);

  $responsive: map_get($settings, responsive);
  @if $responsive != null {
    @each $breakpoint, $variation in $responsive {
      @include respond-from($breakpoint) {
        @include text-variation($variation, $color-set, $font-weight);
      }
    }
  }
}

@mixin text-selector($selector, $settings) {
  @at-root #{$selector} {
    @include _iterate-variations($settings);
  }
}

@mixin text-selectors($settings, $name:null, $is-modifier: false, $with-placeholder: false) {
  @each $element, $variation in $settings {
    $main: $element;
    $alt: map_get($variation, alt);

    @if $name != null {
      @if $is-modifier == true {
        @if $element == md {
          $main: $name;
        }
        @else {
          $main: '#{$name}--#{$element}';
          @if $alt != null {
            $alt: '#{$name}--#{$alt}';
          }
        }
      }
      @else {
        $main: '#{$name}-#{$element}';
        @if $alt != null {
          $alt: '#{$name}-#{$alt}';
        }
      }
    }

    $selector: dse($main);

    @if $alt != null {
      $selector: '#{$selector}, #{dse($alt)}';
    }

    @include text-selector('%#{$main}', $variation);
    @at-root & #{$selector} {
      @extend %#{$main};
    }
  }
}

@mixin text-styles($size: md, $color-set: null, $font-weight: null) {
  @debug 'La  mixin text-styles est dépréciée';
  @include _iterate-variations(map-get($texts-settings, $size), $color-set, $font-weight);
}

// nouvelle version

@mixin _build-style-placeholders() {
  @each $name, $variation in $title-settings {
    %title-#{$name} {
      @include title-style($name, true);
    }
  }

  @each $name, $variation in $text-settings {
    %text-#{$name} {
      @include text-style($name, true);
    }
  }
}

@include _build-style-placeholders();

@function typography-selector($type, $name, $is-modifier: false, $alt: null) {
  $base: '';
  $separator: '-';

  @if $is-modifier {
    @if $name == md {
      @return dse($type);
    }
    $separator: '--';
  }

  @if $type != heading {
    $base: '#{$type + $separator}';
  }

  $selectors: (dse('#{$base + $name}'));

  @if $alt != null {
    $selectors: append($selectors, dse('#{$base + $alt}'), 'comma');
  }

  @return $selectors;
}

@mixin build-typography() {
  @each $name, $variation in $title-settings {
    $type: display;
    @if str-index(quote($name), 'h') == 1 {
      $type: heading;
    }

    #{typography-selector($type, $name, false, map-get($variation, alt))} {
      @extend %title-#{$name};
    }
  }

  @each $name, $variation in $text-settings {
    #{typography-selector(text, $name, true, map-get($variation, alt))} {
      @extend %text-#{$name};
    }
  }
}
