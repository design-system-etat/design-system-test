////
/// Radios Module
/// @group radios
////

/**
 * L'input de type radio avec son label est contenu dans un groupe
 * Ce groupe contient également le texte d'aide (optionnels)
 */
#{dse-group(radio)} {
  /**
   * Style du texte d'aide
   */
  #{dse(hint-text)} {
    @include margin-left(8v);
    @include margin-top(-3v);
  }

  /**
   * Dans le cas d'un groupe de radios, on supprime l'espacement du premier groupe
   */
  &:first-child {
    @include margin-top(-3v);

    input[type="radio"] + label {
      @include margin-top(0);
    }
  }

  /**
   * Dans le cas d'un groupe de radios, on supprime l'espacement du dernier groupe
   */
  &:last-child {
    @include margin-bottom(-3v);

    input[type="radio"] + label {
      @include radio-rich() {
        @include margin-bottom(6v);
      }
    }
  }

  /**
   * On cache l'input de type radio pour le styler via le label
   */
  input[type="radio"] {
    @include absolute;
    opacity: 0;

    /**
     * On applique un display grid sur le label afin de gérer le positionnement des élements
     */
    + label {
      @include relative;
      cursor: pointer;
      @include padding(3v 0);
      @include text-style(md);
      -webkit-tap-highlight-color: transparent;
      display: grid;
      display: -ms-grid;
      grid-row: 1;
      -ms-grid-row: 2;
      grid-column: 2;
      -ms-grid-column: 2;
      align-items: center;
      -ms-align-items: center;
      grid-template-columns: 1fr space(8v);
      -ms-grid-columns: 1fr space(8v);
      text-align: left;
      direction: rtl;

      /**
       * On appelle le mixin radio-rich() pour gérer les radios riches (voir dans _tools.scss)
       * Les radios riches permettent d'associer une image à un radio dans le conteneur du radio
       */
      @include radio-rich() {
        @include padding-left(14v);
        min-height: space(22v);
        @include size(100%, 1px); // height 1px, fix IE vertical center
        @include scheme-element-box-shadow-color(g300, true, 'inset 0 0 0 1px $COLOR');
        @include padding-top(2v);
        @include padding-bottom(2v);
        @include padding-right(26v);
        background-position: calc(100% - #{space(1v)}) center;
        background-size: space(20v) space(20v);
        background-repeat: no-repeat;
        @include scheme-element-bg-color(w, true, true);
        @include display-flex(column, flex-end, center);

        // TODO: refactor hover avec background-color au lieu de backgrounnd-image
        // &:hover,
        // &:active {
        // @include scheme-element-bg-color(block-color-hover, true);
        // }

        /**
         * On applique la taille sm pour le bouton radio riche
         */
        @include before() {
          @include size(4v, 4v);
          @include absolute(null, null, null, 7v);
        }

        /**
         * On délimite l'espace pour l'image de droite et une icône illustrative par défaut
         */
        @include after(null, '') {
          @include absolute(null, 0);
          @include margin(1v);
          @include padding-left(1v);
          @include display-flex(null, center, center);
          @include size(21v, 20v);
          vertical-align: middle;
          @include scheme-element-border-color(g300, true, left);
          // TODO: insérer la font icon ilustrative ifi
          font-size: space(20v); // ?
        }
      }

      /**
       * Style du texte d'aide dans le label
       */
      .rf-hint-text {
        @include margin(0);
        grid-row: 2;
        grid-column: 1;
        -ms-grid-row: 2;
        -ms-grid-column: 1;
      }

      /**
       * On utilise un pseudo element before pour customiser l'aspect du bouton radio
       */
      @include before(inline-block, '') {
        @include size(6v, 6v);
        @include margin-right(2v);
        @include scheme-element-border-color(g800, true);
        flex-shrink: 0;
        border: 1px solid;
        border-radius: 50%;
        transform-origin: center;
        grid-row: 1;
        -ms-grid-row: 1;
        grid-column: 2;
        -ms-grid-column: 2;
        align-items: center;
        -ms-align-items: center;
        transition: transform 0.3s;
      }
    }

    /**
     * On applique les styles au pseudo élément before du label quand l'input présente
     * un état check
     */
    &:checked {
      + label {
        @include before() {
          @include scheme-element-box-shadow-color(w, true, 'inset 0 0 0 5px $COLOR');
          @include scheme-element-bg-color(bf500, true);
          @include scheme-element-border-color(bf500, true);
        }

        /**
         * Cas du radio riche
         */
        @include radio-rich() {
          @include size(100%);
          @include scheme-element-bg-color(bf500);
          @include scheme-element-text-color(w-bf500, true);
          @include scheme-element-box-shadow-color(bf500, true, 'inset 0 0 0 1px $COLOR');

          @include before() {
            @include scheme-element-border-color(w-bf500, true);
            @include scheme-element-box-shadow-color(bf500, true, 'inset 0 0 0 3px $COLOR');
            @include scheme-element-bg-color(w-bf500, true);
          }

          #{dse(hint-text)} {
            @include scheme-element-text-color(g200);
          }
        }
      }
    }

    /**
     * Mixins pour appliquer les styles correspondant au focus ainsi qu'à l'état disabled
     */
    @include scheme-element-focus(false, '+ label::before');
    @include disabled-form-choice();
  }

  /**
   * Modificateur pour la taille sm
   */
  &--sm {
    input[type="radio"] {
      & + label {
        @include before() {
          @include size(4v, 4v);
        }
      }

      &:checked + label {
        @include before() {
          box-shadow: inset 0 0 0 3px var(--w);
        }
      }
    }
  }
}

/**
 * Style spécifique des radios intégrés dans un fiedset
 */
.#{$prefix}-fieldset {
  .#{$prefix}-radio-group {
    &:first-child {
      input[type="radio"] + label {
        @include radio-rich() {
          @include margin-top(3v);
        }
      }
    }

    input[type="radio"] + label {
      @include radio-rich() {
        @include margin-top(2v);
        @include margin-bottom(4v);
      }
    }

    &:last-child {
      input[type="radio"] + label {
        @include radio-rich() {
          @include margin-bottom(7v);
        }
      }
    }
  }

  /**
   * Écart entre le text d'aide et les radios riches
   */
  #{dse(hint-text)} + .#{$prefix}-fieldset__content {
    .#{$prefix}-radio-group {
      &:first-child {
        input[type="radio"] + label {
          @include radio-rich() {
            @include margin-top(7v);
          }
        }
      }
    }
  }

  /**
   * Modificateur pour afficher les radios en ligne
   */
  &--inline {
    .#{$prefix}-radio-group {
      &:not(:last-child) {
        input[type="radio"] + label {
          @include radio-rich() {
            @include margin-right(3v);
            @include margin-bottom(2v);
          }
        }
      }

      &:last-child {
        margin-bottom: 0;

        input[type="radio"] + label {
          @include radio-rich() {
            @include margin-bottom(3v);
          }
        }
      }

      &:first-child {
        input[type="radio"] + label {
          @include radio-rich() {
            @include margin-top(6v);
          }
        }
      }
    }

    /**
     * Écart entre le text d'aide et les radios riches dans le cas des radios inline
     */
    #{dse(hint-text)} + .#{$prefix}-fieldset__content {
      .#{$prefix}-radio-group {
        &:first-child {
          input[type="radio"] + label {
            @include radio-rich() {
              @include margin-top(6v);
            }
          }
        }
      }
    }
  }
}
